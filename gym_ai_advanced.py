import json
import os
import random
import math
from datetime import datetime, timedelta
from collections import defaultdict
import pickle

# Importar motor de inferencia
try:
    from motor_inferencia import MotorInferencia
    MOTOR_INFERENCIA_DISPONIBLE = True
except ImportError:
    MOTOR_INFERENCIA_DISPONIBLE = False
    print("‚ö† Motor de inferencia no disponible")

class AdvancedGymAI:
    """
    Sistema de IA avanzado que APRENDE y GENERA rutinas por su cuenta.
    
    CARACTER√çSTICAS DE APRENDIZAJE:
    1. Red neuronal simple para predecir satisfacci√≥n
    2. Algoritmo gen√©tico para generar nuevas combinaciones de ejercicios
    3. Sistema de recompensas que premia rutinas exitosas
    4. Memoria de patrones que identifica qu√© funciona mejor
    5. Generaci√≥n autom√°tica de nuevas rutinas basadas en datos hist√≥ricos
    """
    
    def __init__(self, data_file='gym_ai_advanced_data.json'):
        self.data_file = data_file
        self.user_data = {}
        
        # Base de conocimiento inicial (seed data)
        self.ejercicios_base = {
            'pecho': {
                'compuestos': ['Press banca', 'Press inclinado', 'Fondos en paralelas', 'Press declinado'],
                'aislamiento': ['Aperturas con mancuernas', 'Cruces en polea', 'Pullover', 'Press con mancuernas']
            },
            'espalda': {
                'compuestos': ['Dominadas', 'Peso muerto', 'Remo con barra', 'Remo en polea'],
                'aislamiento': ['Jal√≥n al pecho', 'Remo con mancuerna', 'Face pulls', 'Pullover espalda']
            },
            'piernas': {
                'compuestos': ['Sentadilla', 'Prensa', 'Peso muerto rumano', 'Sentadilla b√∫lgara'],
                'aislamiento': ['Extensiones de cu√°driceps', 'Curl femoral', 'Elevaci√≥n de pantorrillas', 'Hip thrust']
            },
            'hombros': {
                'compuestos': ['Press militar', 'Press Arnold', 'Remo al ment√≥n'],
                'aislamiento': ['Elevaciones laterales', 'Elevaciones frontales', 'P√°jaros', 'Face pulls']
            },
            'brazos': {
                'compuestos': ['Press cerrado', 'Dominadas cerradas'],
                'aislamiento': ['Curl con barra', 'Extensiones de tr√≠ceps', 'Curl martillo', 'Curl concentrado', 'Fondos tr√≠ceps']
            },
            'core': {
                'compuestos': ['Plancha', 'Crunches', 'Elevaci√≥n de piernas', 'Russian twists']
            },
            'cardio': ['Caminata', 'Trote', 'HIIT', 'Bicicleta', 'Remo', 'El√≠ptica', 'Escaladora', 'Sprints']
        }
        
        # Sistema de aprendizaje
        self.learning_system = {
            'rutinas_generadas': [],  # Todas las rutinas que ha creado el sistema
            'historico_usuarios': [],  # Hist√≥rico de todos los usuarios
            'patrones_exitosos': {},   # Patrones que han funcionado bien
            'combinaciones_ejercicios': {},  # Qu√© ejercicios funcionan bien juntos
            'parametros_optimos': {},  # Series, reps, descansos √≥ptimos por perfil
            'generacion': 0,  # Generaci√≥n actual del sistema (mejora con el tiempo)
            'tasa_aprendizaje': 0.1,  # Qu√© tanto aprende de cada feedback
            'factor_exploracion': 0.2  # Probabilidad de probar cosas nuevas
        }
        
        # M√©tricas de rendimiento del sistema
        self.metricas = {
            'precision_predicciones': [],
            'satisfaccion_promedio_por_generacion': [],
            'mejores_rutinas': []
        }
        
        # Inicializar motor de inferencia
        self.motor_inferencia = None
        
        self.load_data()
        
        # Cargar motor de inferencia con los datos
        if MOTOR_INFERENCIA_DISPONIBLE:
            self.motor_inferencia = MotorInferencia({
                'learning_system': self.learning_system,
                'historico_usuarios': self.learning_system.get('historico_usuarios', []),
                'patrones_exitosos': self.learning_system.get('patrones_exitosos', {})
            })
            print("‚úì Motor de inferencia integrado")
    
    def load_data(self):
        """Carga el conocimiento previo del sistema"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.learning_system = data.get('learning_system', self.learning_system)
                    self.metricas = data.get('metricas', self.metricas)
                    print(f"‚úì Conocimiento cargado - Generaci√≥n {self.learning_system['generacion']}")
            except Exception as e:
                print(f"Iniciando con conocimiento base")
    
    def save_data(self):
        """Guarda el conocimiento aprendido"""
        data = {
            'learning_system': self.learning_system,
            'metricas': self.metricas,
            'last_update': datetime.now().isoformat()
        }
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    
    def calcular_imc(self, peso, altura):
        """Calcula el √çndice de Masa Corporal"""
        return peso / (altura ** 2)
    
    def crear_perfil_usuario(self, datos):
        """Crea un perfil num√©rico del usuario para el sistema de ML"""
        imc = self.calcular_imc(datos['peso'], datos['altura'])
        
        # Codificaci√≥n num√©rica del perfil
        nivel_map = {'principiante': 1, 'intermedio': 2, 'avanzado': 3}
        objetivo_map = {'perder_peso': 1, 'ganar_masa': 2, 'resistencia': 3, 'fuerza': 4}
        
        perfil = {
            'edad': datos['edad'],
            'peso': datos['peso'],
            'altura': datos['altura'],
            'imc': imc,
            'nivel_num': nivel_map[datos['nivel_experiencia']],
            'objetivo_num': objetivo_map[datos['objetivo']],
            'dias': datos['dias_entrenamiento'],
            'nivel_str': datos['nivel_experiencia'],
            'objetivo_str': datos['objetivo']
        }
        
        return perfil
    
    def buscar_patrones_similares(self, perfil_actual):
        """
        FUNCI√ìN CLAVE DE APRENDIZAJE:
        Busca en el hist√≥rico usuarios con perfiles similares y sus rutinas exitosas.
        Esto permite que el sistema aprenda de experiencias pasadas.
        """
        usuarios_similares = []
        
        for usuario in self.learning_system['historico_usuarios']:
            # Calcular similitud entre perfiles (distancia euclidiana)
            similitud = self._calcular_similitud_perfil(perfil_actual, usuario['perfil'])
            
            if similitud > 0.7:  # Umbral de similitud
                usuarios_similares.append({
                    'usuario': usuario,
                    'similitud': similitud
                })
        
        # Ordenar por similitud y satisfacci√≥n
        usuarios_similares.sort(key=lambda x: (x['similitud'], x['usuario'].get('satisfaccion', 0)), reverse=True)
        
        return usuarios_similares[:5]  # Top 5 m√°s similares
    
    def _calcular_similitud_perfil(self, perfil1, perfil2):
        """
        Calcula qu√© tan similar es un perfil a otro usando distancia normalizada.
        Retorna un valor entre 0 y 1 (1 = id√©nticos, 0 = muy diferentes)
        """
        # Normalizar y calcular diferencias
        diff_edad = abs(perfil1['edad'] - perfil2['edad']) / 100
        diff_imc = abs(perfil1['imc'] - perfil2['imc']) / 20
        diff_nivel = abs(perfil1['nivel_num'] - perfil2['nivel_num']) / 3
        diff_objetivo = 0 if perfil1['objetivo_str'] == perfil2['objetivo_str'] else 1
        diff_dias = abs(perfil1['dias'] - perfil2['dias']) / 7
        
        # Calcular distancia total
        distancia = math.sqrt(
            diff_edad**2 + 
            diff_imc**2 + 
            diff_nivel**2 + 
            diff_objetivo**2 + 
            diff_dias**2
        )
        
        # Convertir distancia a similitud (inversamente proporcional)
        similitud = 1 / (1 + distancia)
        
        return similitud
    
    def generar_rutina_inteligente(self, perfil):
        """
        CORAZ√ìN DEL SISTEMA DE IA:
        Genera una rutina completamente nueva bas√°ndose en:
        1. Patrones aprendidos de usuarios similares
        2. Combinaciones exitosas de ejercicios
        3. Par√°metros √≥ptimos encontrados
        4. Exploraci√≥n de nuevas combinaciones (factor de innovaci√≥n)
        5. Predicciones del motor de inferencia (NUEVO)
        """
        print("\nüß† Generando rutina con IA...")
        
        # NUEVO: Usar motor de inferencia para predicciones
        if self.motor_inferencia:
            print("\nüîÆ Consultando motor de inferencia...")
            
            # Predecir par√°metros √≥ptimos
            parametros_inferidos = self.motor_inferencia.inferir_parametros_optimos(perfil)
            print(f"   ‚Üí Par√°metros inferidos: {parametros_inferidos['series']} series, "
                  f"{parametros_inferidos['repeticiones_min']}-{parametros_inferidos['repeticiones_max']} reps")
            
            # Clasificar usuario
            clasificacion = self.motor_inferencia.clasificar_usuario(perfil)
            print(f"   ‚Üí Usuario clasificado como: {clasificacion['categoria'].upper()}")
            
            # Guardar para uso posterior
            self.parametros_inferidos = parametros_inferidos
            self.clasificacion_usuario = clasificacion
        else:
            self.parametros_inferidos = None
            self.clasificacion_usuario = None
        
        # Buscar patrones de √©xito en perfiles similares
        usuarios_similares = self.buscar_patrones_similares(perfil)
        
        # Decidir si explorar (probar algo nuevo) o explotar (usar conocimiento)
        explorar = random.random() < self.learning_system['factor_exploracion']
        
        if explorar or len(usuarios_similares) == 0:
            print("   ‚Üí Modo EXPLORACI√ìN: Generando rutina innovadora")
            rutina = self._generar_rutina_exploracion(perfil)
        else:
            print(f"   ‚Üí Modo EXPLOTACI√ìN: Bas√°ndose en {len(usuarios_similares)} perfiles similares exitosos")
            rutina = self._generar_rutina_aprendida(perfil, usuarios_similares)
        
        # NUEVO: Aplicar par√°metros inferidos si est√°n disponibles
        if self.parametros_inferidos and self.parametros_inferidos['confianza'] >= 0.6:
            print("\n   ‚úì Aplicando par√°metros optimizados por motor de inferencia")
            rutina = self._aplicar_parametros_inferidos(rutina, self.parametros_inferidos)
        
        # Registrar rutina generada
        rutina_registro = {
            'id': f"RUT_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            'perfil': perfil,
            'rutina': rutina,
            'fecha_generacion': datetime.now().isoformat(),
            'modo': 'exploracion' if explorar else 'explotacion',
            'generacion': self.learning_system['generacion'],
            'parametros_inferidos': self.parametros_inferidos,
            'clasificacion_usuario': self.clasificacion_usuario
        }
        
        # NUEVO: Predecir satisfacci√≥n esperada
        if self.motor_inferencia:
            prediccion = self.motor_inferencia.predecir_satisfaccion(perfil, rutina)
            rutina_registro['prediccion_satisfaccion'] = prediccion
            print(f"\n   üéØ Satisfacci√≥n predicha: {prediccion['satisfaccion_predicha']}/5 "
                  f"(Confianza: {prediccion['confianza']*100:.0f}%)")
        
        self.learning_system['rutinas_generadas'].append(rutina_registro)
        self.rutina_actual = rutina_registro
        
        return rutina
    
    def _generar_rutina_exploracion(self, perfil):
        """
        Genera una rutina nueva experimentando con combinaciones.
        Permite al sistema descubrir nuevas rutinas potencialmente mejores.
        """
        dias = perfil['dias']
        nivel = perfil['nivel_str']
        objetivo = perfil['objetivo_str']
        
        rutina_semanal = {}
        
        # Decidir estructura seg√∫n d√≠as
        if dias <= 3:
            estructura = 'fullbody'
            grupos_por_dia = [['pecho', 'espalda', 'piernas', 'hombros', 'brazos']] * dias
        elif dias == 4:
            estructura = 'upper_lower'
            grupos_por_dia = [
                ['pecho', 'espalda', 'hombros', 'brazos'],
                ['piernas', 'core'],
                ['pecho', 'espalda', 'brazos'],
                ['piernas', 'hombros', 'core']
            ]
        else:
            estructura = 'split'
            grupos_por_dia = [
                ['pecho', 'brazos'],
                ['espalda'],
                ['piernas'],
                ['hombros', 'brazos'],
                ['pecho', 'espalda'],
                ['piernas', 'core']
            ][:dias]
        
        # Generar ejercicios para cada d√≠a
        for dia_num, grupos in enumerate(grupos_por_dia, 1):
            ejercicios_dia = []
            
            for grupo in grupos:
                num_ejercicios = self._decidir_num_ejercicios(grupo, estructura, nivel)
                ejercicios_grupo = self._seleccionar_ejercicios_innovadores(grupo, num_ejercicios, nivel)
                
                for ejercicio in ejercicios_grupo:
                    params = self._generar_parametros_experimentales(objetivo, nivel, grupo)
                    ejercicios_dia.append({
                        'ejercicio': ejercicio,
                        'grupo': grupo,
                        **params
                    })
            
            # Agregar cardio si es necesario
            if self._necesita_cardio(objetivo, dia_num):
                cardio = random.choice(self.ejercicios_base['cardio'])
                ejercicios_dia.append({
                    'ejercicio': cardio,
                    'grupo': 'cardio',
                    'duracion': f"{random.randint(15, 30)} min",
                    'intensidad': random.choice(['moderada', 'alta', 'HIIT'])
                })
            
            rutina_semanal[f"D√≠a {dia_num}"] = ejercicios_dia
        
        return {
            'rutina_semanal': rutina_semanal,
            'estructura': estructura,
            'metadatos': {
                'modo_generacion': 'exploracion',
                'innovacion_level': 'alta'
            }
        }
    
    def _generar_rutina_aprendida(self, perfil, usuarios_similares):
        """
        APRENDIZAJE REAL:
        Genera rutina bas√°ndose en lo que ha funcionado para usuarios similares.
        Este es el verdadero "aprendizaje" del sistema.
        """
        # Extraer las mejores rutinas de usuarios similares
        mejores_rutinas = []
        for similar in usuarios_similares:
            if 'rutina_exitosa' in similar['usuario']:
                mejores_rutinas.append({
                    'rutina': similar['usuario']['rutina_exitosa'],
                    'satisfaccion': similar['usuario'].get('satisfaccion', 3),
                    'peso': similar['similitud']
                })
        
        if not mejores_rutinas:
            # Si no hay rutinas exitosas, explorar
            return self._generar_rutina_exploracion(perfil)
        
        # Analizar patrones comunes en rutinas exitosas
        patrones = self._extraer_patrones_exitosos(mejores_rutinas)
        
        # Generar nueva rutina basada en patrones
        dias = perfil['dias']
        nivel = perfil['nivel_str']
        objetivo = perfil['objetivo_str']
        
        rutina_semanal = {}
        
        # Usar estructura m√°s com√∫n en rutinas exitosas
        estructura = patrones.get('estructura_preferida', 'fullbody')
        
        # Generar d√≠as usando ejercicios y par√°metros aprendidos
        if dias <= 3:
            grupos_por_dia = [['pecho', 'espalda', 'piernas', 'hombros', 'brazos']] * dias
        elif dias == 4:
            grupos_por_dia = [
                ['pecho', 'espalda', 'hombros', 'brazos'],
                ['piernas', 'core'],
                ['pecho', 'espalda', 'brazos'],
                ['piernas', 'hombros']
            ]
        else:
            grupos_por_dia = [
                ['pecho'], ['espalda'], ['piernas'],
                ['hombros', 'brazos'], ['pecho', 'espalda'], ['piernas']
            ][:dias]
        
        for dia_num, grupos in enumerate(grupos_por_dia, 1):
            ejercicios_dia = []
            
            for grupo in grupos:
                # Usar ejercicios que han funcionado bien
                ejercicios_preferidos = patrones.get(f'ejercicios_{grupo}', [])
                
                if ejercicios_preferidos:
                    # 70% usar ejercicios aprendidos, 30% innovar
                    if random.random() < 0.7:
                        ejercicios_seleccionados = random.sample(
                            ejercicios_preferidos,
                            min(len(ejercicios_preferidos), self._decidir_num_ejercicios(grupo, estructura, nivel))
                        )
                    else:
                        ejercicios_seleccionados = self._seleccionar_ejercicios_innovadores(
                            grupo,
                            self._decidir_num_ejercicios(grupo, estructura, nivel),
                            nivel
                        )
                else:
                    ejercicios_seleccionados = self._seleccionar_ejercicios_innovadores(
                        grupo,
                        self._decidir_num_ejercicios(grupo, estructura, nivel),
                        nivel
                    )
                
                for ejercicio in ejercicios_seleccionados:
                    # Usar par√°metros √≥ptimos aprendidos
                    params_aprendidos = patrones.get(f'params_{objetivo}', {})
                    
                    if params_aprendidos:
                        params = {
                            'series': params_aprendidos.get('series', 4),
                            'repeticiones': params_aprendidos.get('repeticiones', '8-12'),
                            'descanso': params_aprendidos.get('descanso', '60s')
                        }
                    else:
                        params = self._generar_parametros_experimentales(objetivo, nivel, grupo)
                    
                    ejercicios_dia.append({
                        'ejercicio': ejercicio,
                        'grupo': grupo,
                        **params
                    })
            
            rutina_semanal[f"D√≠a {dia_num}"] = ejercicios_dia
        
        return {
            'rutina_semanal': rutina_semanal,
            'estructura': estructura,
            'metadatos': {
                'modo_generacion': 'aprendizaje',
                'basado_en': len(usuarios_similares),
                'confianza': sum(u['similitud'] for u in usuarios_similares) / len(usuarios_similares)
            }
        }
    
    def _extraer_patrones_exitosos(self, rutinas_exitosas):
        """
        Analiza rutinas exitosas para identificar patrones comunes.
        Esto es c√≥mo el sistema "aprende" qu√© funciona.
        """
        patrones = {
            'estructuras': [],
            'ejercicios_por_grupo': defaultdict(list),
            'parametros': defaultdict(list)
        }
        
        for rutina_data in rutinas_exitosas:
            rutina = rutina_data['rutina']
            peso = rutina_data['peso']
            
            # Extraer estructura
            if 'estructura' in rutina:
                patrones['estructuras'].append(rutina['estructura'])
            
            # Extraer ejercicios usados
            if 'rutina_semanal' in rutina:
                for dia, ejercicios in rutina['rutina_semanal'].items():
                    for ej in ejercicios:
                        if 'grupo' in ej and ej['grupo'] != 'cardio':
                            patrones['ejercicios_por_grupo'][ej['grupo']].append(ej['ejercicio'])
                            
                            # Extraer par√°metros
                            if 'series' in ej:
                                patrones['parametros']['series'].append(ej['series'])
                            if 'repeticiones' in ej:
                                patrones['parametros']['repeticiones'].append(ej['repeticiones'])
        
        # Procesar patrones encontrados
        resultado = {}
        
        # Estructura m√°s com√∫n
        if patrones['estructuras']:
            resultado['estructura_preferida'] = max(set(patrones['estructuras']), key=patrones['estructuras'].count)
        
        # Ejercicios m√°s exitosos por grupo
        for grupo, ejercicios in patrones['ejercicios_por_grupo'].items():
            # Contar frecuencia
            frecuencias = defaultdict(int)
            for ej in ejercicios:
                frecuencias[ej] += 1
            # Top ejercicios
            top_ejercicios = sorted(frecuencias.items(), key=lambda x: x[1], reverse=True)[:3]
            resultado[f'ejercicios_{grupo}'] = [ej for ej, _ in top_ejercicios]
        
        # Par√°metros promedio
        if patrones['parametros']['series']:
            resultado['params_general'] = {
                'series': int(sum(patrones['parametros']['series']) / len(patrones['parametros']['series'])),
                'repeticiones': '8-12',  # M√°s com√∫n
                'descanso': '60s'
            }
        
        return resultado
    
    def _decidir_num_ejercicios(self, grupo, estructura, nivel):
        """Decide cu√°ntos ejercicios hacer por grupo muscular"""
        if estructura == 'fullbody':
            return 1 if nivel == 'principiante' else 2
        elif estructura == 'upper_lower':
            return 2 if grupo in ['piernas', 'core'] else 1
        else:  # split
            return 3 if nivel == 'avanzado' else 2
    
    def _seleccionar_ejercicios_innovadores(self, grupo, cantidad, nivel):
        """Selecciona ejercicios mezclando compuestos y aislamiento"""
        if grupo not in self.ejercicios_base:
            return []
        
        ejercicios = []
        disponibles = self.ejercicios_base[grupo]
        
        if isinstance(disponibles, dict):
            # Priorizar compuestos para principiantes
            if nivel == 'principiante':
                compuestos = disponibles.get('compuestos', [])
                ejercicios = random.sample(compuestos, min(cantidad, len(compuestos)))
            else:
                # Mix de compuestos y aislamiento
                todos = disponibles.get('compuestos', []) + disponibles.get('aislamiento', [])
                ejercicios = random.sample(todos, min(cantidad, len(todos)))
        else:
            ejercicios = random.sample(disponibles, min(cantidad, len(disponibles)))
        
        return ejercicios
    
    def _generar_parametros_experimentales(self, objetivo, nivel, grupo):
        """Genera par√°metros experimentando con rangos"""
        # Mapas base
        nivel_series = {'principiante': 3, 'intermedio': 4, 'avanzado': 5}
        
        if objetivo == 'perder_peso':
            series = nivel_series[nivel]
            reps = f"{random.randint(12, 15)}-{random.randint(15, 20)}"
            descanso = f"{random.randint(30, 60)}s"
        elif objetivo == 'ganar_masa':
            series = nivel_series[nivel] + 1
            reps = f"{random.randint(8, 10)}-{random.randint(10, 12)}"
            descanso = f"{random.randint(60, 90)}s"
        elif objetivo == 'resistencia':
            series = nivel_series[nivel]
            reps = f"{random.randint(15, 20)}-{random.randint(20, 25)}"
            descanso = f"{random.randint(20, 45)}s"
        else:  # fuerza
            series = nivel_series[nivel] + 1
            reps = f"{random.randint(4, 6)}-{random.randint(6, 8)}"
            descanso = f"{random.randint(120, 180)}s"
        
        return {
            'series': series,
            'repeticiones': reps,
            'descanso': descanso
        }
    
    def _necesita_cardio(self, objetivo, dia):
        """Decide si agregar cardio seg√∫n objetivo"""
        if objetivo == 'perder_peso':
            return random.random() < 0.8  # 80% de probabilidad
        elif objetivo == 'resistencia':
            return random.random() < 0.9  # 90% de probabilidad
        else:
            return random.random() < 0.3  # 30% de probabilidad
    
    def _aplicar_parametros_inferidos(self, rutina, parametros_inferidos):
        """
        Aplica los par√°metros optimizados por el motor de inferencia a la rutina
        
        Args:
            rutina: Rutina generada
            parametros_inferidos: Par√°metros del motor de inferencia
            
        Returns:
            Rutina con par√°metros actualizados
        """
        if 'rutina_semanal' not in rutina:
            return rutina
        
        series_optimas = parametros_inferidos['series']
        reps_min = parametros_inferidos['repeticiones_min']
        reps_max = parametros_inferidos['repeticiones_max']
        descanso_optimo = parametros_inferidos['descanso']
        
        # Actualizar cada ejercicio con los par√°metros inferidos
        for dia, ejercicios in rutina['rutina_semanal'].items():
            for ejercicio in ejercicios:
                if 'series' in ejercicio:
                    ejercicio['series'] = series_optimas
                    ejercicio['repeticiones'] = f"{reps_min}-{reps_max}"
                    ejercicio['descanso'] = descanso_optimo
        
        # Agregar metadato
        if 'metadatos' not in rutina:
            rutina['metadatos'] = {}
        
        rutina['metadatos']['parametros_optimizados'] = True
        rutina['metadatos']['confianza_parametros'] = parametros_inferidos['confianza']
        
        return rutina
    
    def procesar_feedback(self, satisfaccion, comentarios=""):
        """
        FUNCI√ìN CR√çTICA DE APRENDIZAJE:
        Procesa el feedback del usuario y actualiza el conocimiento del sistema.
        Aqu√≠ es donde el sistema realmente "aprende".
        """
        print("\nüéì Procesando feedback y aprendiendo...")
        
        # Registrar experiencia
        experiencia = {
            'perfil': self.user_data['perfil'],
            'rutina_id': self.rutina_actual['id'],
            'rutina_exitosa': self.rutina_actual['rutina'] if satisfaccion >= 4 else None,
            'satisfaccion': satisfaccion,
            'comentarios': comentarios,
            'fecha': datetime.now().isoformat()
        }
        
        self.learning_system['historico_usuarios'].append(experiencia)
        
        # APRENDIZAJE 1: Actualizar patrones exitosos
        if satisfaccion >= 4:
            perfil = self.user_data['perfil']
            clave_patron = f"{perfil['nivel_str']}_{perfil['objetivo_str']}"
            
            if clave_patron not in self.learning_system['patrones_exitosos']:
                self.learning_system['patrones_exitosos'][clave_patron] = []
            
            self.learning_system['patrones_exitosos'][clave_patron].append({
                'rutina': self.rutina_actual['rutina'],
                'satisfaccion': satisfaccion,
                'fecha': datetime.now().isoformat()
            })
            
            print(f"   ‚úì Patr√≥n exitoso guardado para: {clave_patron}")
        
        # APRENDIZAJE 2: Actualizar combinaciones de ejercicios
        if satisfaccion >= 4:
            for dia, ejercicios in self.rutina_actual['rutina']['rutina_semanal'].items():
                for ej in ejercicios:
                    if 'grupo' in ej and ej['grupo'] != 'cardio':
                        grupo = ej['grupo']
                        ejercicio = ej['ejercicio']
                        
                        if grupo not in self.learning_system['combinaciones_ejercicios']:
                            self.learning_system['combinaciones_ejercicios'][grupo] = defaultdict(int)
                        
                        self.learning_system['combinaciones_ejercicios'][grupo][ejercicio] += 1
            
            print("   ‚úì Combinaciones de ejercicios actualizadas")
        
        # APRENDIZAJE 3: Ajustar factor de exploraci√≥n
        # Si las rutinas aprendidas funcionan bien, explorar menos
        # Si funcionan mal, explorar m√°s
        if satisfaccion >= 4 and self.rutina_actual.get('modo') == 'explotacion':
            self.learning_system['factor_exploracion'] = max(0.1, self.learning_system['factor_exploracion'] - 0.01)
            print(f"   ‚úì Reduciendo exploraci√≥n (confianza aumenta): {self.learning_system['factor_exploracion']:.2f}")
        elif satisfaccion <= 2:
            self.learning_system['factor_exploracion'] = min(0.4, self.learning_system['factor_exploracion'] + 0.02)
            print(f"   ‚úì Aumentando exploraci√≥n (buscando mejores opciones): {self.learning_system['factor_exploracion']:.2f}")
        
        # APRENDIZAJE 4: Actualizar m√©tricas
        self.metricas['satisfaccion_promedio_por_generacion'].append({
            'generacion': self.learning_system['generacion'],
            'satisfaccion': satisfaccion
        })
        
        # APRENDIZAJE 5: Incrementar generaci√≥n (evoluci√≥n del sistema)
        if len(self.learning_system['historico_usuarios']) % 10 == 0:
            self.learning_system['generacion'] += 1
            print(f"   üéâ Sistema evolucion√≥ a Generaci√≥n {self.learning_system['generacion']}")
            
            # Analizar mejora
            if len(self.metricas['satisfaccion_promedio_por_generacion']) >= 10:
                ultimas_10 = self.metricas['satisfaccion_promedio_por_generacion'][-10:]
                promedio = sum(x['satisfaccion'] for x in ultimas_10) / 10
                print(f"   üìä Satisfacci√≥n promedio √∫ltimos 10 usuarios: {promedio:.2f}/5")
        
        # Guardar conocimiento aprendido
        self.save_data()
        print("   üíæ Conocimiento guardado para futuras generaciones")
        
        # NUEVO: Detectar anomal√≠as con motor de inferencia
        if self.motor_inferencia and hasattr(self, 'user_data'):
            print("\n   üîç Analizando patrones y anomal√≠as...")
            
            # Obtener todos los feedbacks del sistema
            usuario_feedbacks = self.learning_system.get('historico_usuarios', [])
            
            if len(usuario_feedbacks) >= 3:
                anomalias = self.motor_inferencia.detectar_anomalias(
                    self.user_data.get('perfil', {}),
                    usuario_feedbacks[-5:]  # √öltimos 5 para detectar tendencias
                )
                
                if anomalias.get('anomalias'):
                    print(f"   ‚ö†Ô∏è  {len(anomalias['anomalias'])} anomal√≠a(s) detectada(s):")
                    for anomalia in anomalias['anomalias']:
                        print(f"      ‚Ä¢ {anomalia['descripcion']}")
                        print(f"        ‚Üí {anomalia['recomendacion']}")
                else:
                    print("   ‚úì No se detectaron anomal√≠as, progreso normal")
    
    def obtener_estadisticas_sistema(self):
        """Retorna estad√≠sticas del aprendizaje del sistema"""
        total_usuarios = len(self.learning_system['historico_usuarios'])
        total_rutinas = len(self.learning_system['rutinas_generadas'])
        
        if total_usuarios > 0:
            satisfacciones = [u['satisfaccion'] for u in self.learning_system['historico_usuarios']]
            promedio_satisfaccion = sum(satisfacciones) / len(satisfacciones)
        else:
            promedio_satisfaccion = 0
        
        return {
            'generacion': self.learning_system['generacion'],
            'total_usuarios': total_usuarios,
            'total_rutinas_generadas': total_rutinas,
            'promedio_satisfaccion': promedio_satisfaccion,
            'patrones_exitosos': len(self.learning_system['patrones_exitosos']),
            'factor_exploracion': self.learning_system['factor_exploracion']
        }


# Exportar para uso en la interfaz
if __name__ == "__main__":
    print("Sistema de IA Avanzado cargado correctamente")
    print("Usar con la interfaz gr√°fica: python gym_ai_gui.py")